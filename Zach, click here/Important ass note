I have no fuckin clue how to properly work github. I think I did some shit but I have no goddamn clue.
I tried to push all my code, and I think I did. I also made the 3 versions and slso also put them on .txt files for you in case the other stuff doesn't work.

The only libraries/dependencies you need are:
bouncycastle.bcprov.jdk15on
bouncycastle.bcpkix.jdk15on
(idk if the versions i pushed will include that for you or not)
(they can be found and added with Maven)

The 3 versions are:

1.) Basic Chatroom:  No encryption whatsoever. Just a basic chatroom.It can sustain multiple users at once.

2.) Encrypted transmission:  Operates similarily to the basic chatroom, but has no naming feature. Also, all the messages that it sends and receives are encrypted. It can sustain multiple users at once.

3.) Decrypted Transmission: Sorta like the Encrypted Transmission. The messages sent by the client are encrypted, come back encrypted, and can then be decrypted no problem. The issue is when you open a 2nd client. That's when shit goes south.
The 2nd client cannot decrypt the messages sent by the first client, but the first client still can. But when a message is sent by the 2nd client, the first client fucks up.

My guess is that it has to do with the way the keypairs are shared and generated.
Seems like if we want a full chatroom app, each client will need to generate personal keys with the server, the clients will then send the encrypted info, the server will decrypt it, read it, RE-encrypt it multiple times for each user,
and then send each user a copy of said message. Efficient? No. Reasonable given our scope and speed of modern machines? Yes. This might be the best way to go. I can try to work on this some more if you can't, but high-key, that might work.
I'm not certain i will be able to do a ton more before it is technically "due" but knowing Doyle, he would be okay to give us an extra day or so to finalize this shit.

1 more thing:
a good number of the methods and wording came from Dr. GPT, so that should probably be cleaned up/dirtied just a smdidge before submitting.
I have altered a lot of stuff and included some of my own stuff, so I doubt it would be a huge deal, but I would rather be safe than sorry.
