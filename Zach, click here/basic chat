server:

import java.io.*;
import java.net.*;
import java.util.ArrayList;
import java.util.List;

public class server {
    private static List<ClientHandler> clients = new ArrayList<>();

    public static void main(String[] args) throws Exception {
        ServerSocket serverSocket = new ServerSocket(12345);
        System.out.println("Server started. Waiting for clients...");

        while (true) {
            Socket clientSocket = serverSocket.accept();
            System.out.println("Client connected: " + clientSocket);

            ClientHandler clientHandler = new ClientHandler(clientSocket);
            clients.add(clientHandler);
            clientHandler.start();
        }
    }

    public static void broadcastMessage(String message) {
        System.out.println("Broadcasting message: " + message);
        for (ClientHandler clientHandler : clients) {
            if (clientHandler.isReady()) {
                clientHandler.sendMessage(message);
            }
        }
    }
}




client: 

import java.io.*;
import java.net.*;

public class client {
    private static boolean hasChosenName = false;

    public static void main(String[] args) throws Exception {
        // Connect to the server
        Socket socket = new Socket("localhost", 12345);
        System.out.println("Connected to server.");

        BufferedReader userInput = new BufferedReader(new InputStreamReader(System.in));
        PrintWriter out = new PrintWriter(socket.getOutputStream(), true);

        // Thread for reading messages from the server
        Thread readThread = new Thread(() -> {
            try {
                BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                String inputLine;
                while ((inputLine = in.readLine()) != null) {
                    if (!hasChosenName) {
                        System.out.println(inputLine);
                        System.out.print("Animal Choice: ");
                        hasChosenName = true;
                    } else {
                        System.out.println(inputLine);
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        });
        readThread.start();

        // Thread for sending messages to the server
        while (true) {
            String message = userInput.readLine();
            out.println(message);
        }
    }
}




client handler:
import java.io.*;
import java.net.*;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;

public class ClientHandler extends Thread {
    private Socket clientSocket;
    private PrintWriter out;
    private String animalName;
    private boolean ready = false;
    private DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("HH:mm:ss");

    public ClientHandler(Socket socket) {
        this.clientSocket = socket;
    }

    public void sendMessage(String message) {
        out.println(message);
    }

    public boolean isReady() {
        return ready;
    }

    @Override
    public void run() {
        try {
            BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
            out = new PrintWriter(clientSocket.getOutputStream(), true);

            // Prompt the client to choose an animal name
            if (animalName == null) {
                out.println("Please choose an animal name (e.g., Rabbit, Duck, Pig):");
                animalName = in.readLine();
                System.out.println("Client " + animalName + " connected.");
                ready = true;
                server.broadcastMessage("Client " + animalName + " connected.");
            }

            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                if (ready && !inputLine.startsWith(animalName + ": ")) {
                    LocalTime currentTime = LocalTime.now();
                    String formattedTime = currentTime.format(timeFormatter);
                    String response = "[" + formattedTime + " " + animalName + "]: " + inputLine;
                    server.broadcastMessage(response);
                }
            }

            // Broadcast when client disconnects
            if (ready) {
                System.out.println("Client " + animalName + " disconnected.");
                server.broadcastMessage("Client " + animalName + " disconnected.");
            }

            in.close();
            out.close();
            clientSocket.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

